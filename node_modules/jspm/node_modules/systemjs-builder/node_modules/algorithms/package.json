{
  "name": "algorithms",
  "version": "0.9.1",
  "description": "Traditional computer science algorithms and data structures implemented in JavaScript",
  "main": "./index.js",
  "scripts": {
    "lint": "eslint src/",
    "test": "mocha -R spec --recursive src/test"
  },
  "pre-commit": [
    "lint",
    "test"
  ],
  "dependencies": {},
  "devDependencies": {
    "coveralls": "^2.11.3",
    "eslint": "^1.0.0",
    "istanbul": "^0.3.17",
    "mocha": "^2.2.5",
    "pre-commit": "^1.1.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/felipernb/algorithms.js"
  },
  "keywords": [
    "computer science",
    "cs",
    "algorithms",
    "data structures"
  ],
  "author": {
    "name": "Felipe Ribeiro",
    "email": "felipernb@gmail.com",
    "url": "http://github.com/felipernb"
  },
  "contributors": [
    {
      "name": "eush77",
      "email": "eush77@gmail.com"
    },
    {
      "name": "tayllan",
      "email": "tayllanburigo@gmail.com"
    },
    {
      "name": "anaran",
      "email": "adrian.aichner@gmail.com"
    },
    {
      "name": "Joshua Curl",
      "email": "curljosh@msu.edu"
    },
    {
      "name": "nitinsaroha",
      "email": "nitinsaroha6@hotmail.com"
    },
    {
      "name": "Andre P. Oliveira",
      "email": "aoliveira01.student@manhattan.edu"
    },
    {
      "name": "Iain McDonald",
      "email": "iain@lifebeyondfife.com"
    },
    {
      "name": "dingshu",
      "email": "ds303077135@gmail.com"
    },
    {
      "name": "Liam Griffiths",
      "email": "liamgriffiths@gmail.com"
    },
    {
      "name": "BrunoRB",
      "email": "brunorb8@hotmail.com"
    },
    {
      "name": "geakstr",
      "email": "geakstr@me.com"
    },
    {
      "name": "Matt R. Wilson",
      "email": "matt.wilson@warbyparker.com"
    },
    {
      "name": "Gaurav Mittal",
      "email": "gaurav.mittal@students.iiit.ac.in"
    },
    {
      "name": "Juan Lopes",
      "email": "me@juanlopes.net"
    }
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/felipernb/algorithms.js/issues"
  },
  "homepage": "https://github.com/felipernb/algorithms.js/wiki",
  "readme": "# algorithms.js\n\n[![Build Status](https://travis-ci.org/felipernb/algorithms.js.png?branch=master)](https://travis-ci.org/felipernb/algorithms.js)\n[![Coverage Status](https://coveralls.io/repos/felipernb/algorithms.js/badge.png?branch=master)](https://coveralls.io/r/felipernb/algorithms.js?branch=master)\n[![Dependency Status](https://david-dm.org/felipernb/algorithms.js.svg)](https://david-dm.org/felipernb/algorithms.js)\n[![devDependency Status](https://david-dm.org/felipernb/algorithms.js/dev-status.svg)](https://david-dm.org/felipernb/algorithms.js#info=devDependencies)\n[![Inline docs](http://inch-ci.org/github/felipernb/algorithms.js.svg?branch=master)](http://inch-ci.org/github/felipernb/algorithms.js)\n\n![](http://www.quickmeme.com/img/8d/8d30a19413145512ad5a05c46ec0da545df5ed79e113fcf076dc03c7514eb631.jpg)\n\n\n## Atwood's Law applied to CS101.\n\nClassic algorithms and data structures implemented in JavaScript, you know... FOR SCIENCE.\n\n### Installing\n```\nnpm install --save algorithms\n```\n\n### Contents\n\n#### Data Structures\n\n```javascript\nrequire('algorithms/data_structures');\n// or\nrequire('algorithms').DataStructures;\n```\n\n* BST\n* Graph\n* HashTable\n* Heap\n * MinHeap\n * MaxHeap\n* LinkedList\n* PriorityQueue\n* Queue\n* Stack\n* Set (HashSet)\n* DisjointSetForest\n* FenwickTree\n\n#### Graph algorithms\n\n```javascript\nrequire('algorithms/graph');\n// or\nrequire('algorithms').Graph;\n```\n\n* topologicalSort\n* eulerPath\n* depthFirstSearch\n* breadthFirstSearch\n\n##### Shortest path\n* bfsShortestPath\n* dijkstra\n* SPFA (Shortest Path Faster Algorithm)\n* bellmanFord\n* floydWarshall\n\n##### Minimum spanning tree\n* prim\n* kruskal\n\n#### Math algorithms\n\n```javascript\nrequire('algorithms/math');\n// or\nrequire('algorithms').Math;\n```\n\n* fibonacci\n* fisherYates\n* gcd (Greatest common divisor)\n* extendedEuclidean\n* lcm (Least common multiple)\n* newtonSqrt\n* reservoirSampling\n* fastPower\n* nextPermutation\n* powerSet\n* shannonEntropy\n\n#### Search algorithms\n\n```javascript\nrequire('algorithms/search');\n// or\nrequire('algorithms').Search;\n```\n\n* bfs (breadth-first search for binary trees)\n* binarySearch\n* dfs (depth-first search for binary trees)\n * inOrder (default)\n * preOrder\n * postOrder\n\n#### Sorting algorithms\n\n```javascript\nrequire('algorithms/sorting');\n// or\nrequire('algorithms').Sorting;\n```\n\n* bubbleSort\n* countingSort\n* heapSort\n* quicksort\n* selectionSort\n* radixSort\n* insertionSort\n* shellSort\n\n#### String algorithms\n\n```javascript\nrequire('algorithms/string');\n// or\nrequire('algorithms').String;\n```\n\n* levenshtein\n* rabinKarp\n* knuthMorrisPratt\n* huffman\n * encode\n * decode\n* hamming\n* longestCommonSubsequence\n* longestCommonSubstring\n\n\n",
  "readmeFilename": "README.md",
  "_id": "algorithms@0.9.1",
  "dist": {
    "shasum": "38a44dd2aff846897ec8650f6b1a538f672a0c8c"
  },
  "_from": "algorithms@^0.9.1",
  "_resolved": "https://registry.npmjs.org/algorithms/-/algorithms-0.9.1.tgz"
}
